одно центральное хранилище данных для всего приложения

компоненты никогда не манипулируют состоянием на прямую

если состояние нужно только конкретному компоненту, и 
используется только им, то имеет смысл использовать useState
рядом с Redux

So the objects which we return in the reducer will not, and that's super important will not be merged with the existing state.
They will overwrite the existing state.

You should never super important never mutate the state, the existing state.

// error (mutate the existing state)
if (action.type === 'increment){
state.counter++;
  return {
    counter: state.counter,
    showCounter: state.showCounter
  };
}

// =========================
Действие (Action) - это просто объект в котором есть type и payload, или просто type
const incrementAction = {
  type: 'INCREMENT',
  payload: 1 // Дополнительные данные
};

dispatch -  это метод, который отправляет действие в хранилище.
dispatch(incrementAction);

Редюсер (Reducer) -  это чистая функция, которая получает текущее состояние и действие, а затем возвращает новое состояние
const counterReducer = (state = 0, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return state + action.payload;
    default:
      return state;
  }
};