Представь, что объекты в JavaScript — это как ящики. Когда ты создаешь объект, ты создаешь новый ящик с данными внутри.

Теперь, если ты пишешь что-то вроде:
let obj1 = { a: 1 };
let obj2 = obj1;

Ты не создаешь второй ящик с копией данных. Вместо этого, ты говоришь: «obj2 указывает на тот же самый ящик, что и obj1». Это означает, что оба они смотрят на один и тот же набор данных.

Таким образом, если ты изменишь что-то в obj2, то это изменится и в obj1, потому что они оба ссылаются на один и тот же ящик.
obj2.a = 2;
console.log(obj1.a); // выведет 2

Оба объекта работают с одними и теми же данными, потому что они ссылаются на один и тот же объект в памяти.

// ============================

С примитивными типами данных (числа, строки, булевы значения, null, undefined, Symbol, и BigInt) всё работает по-другому. Когда ты присваиваешь примитивное значение одной переменной другой, создается копия значения.

let a = 10;
let b = a;

Здесь b получает копию значения a. Это означает, что они теперь независимы друг от друга. Если ты изменишь b, это никак не повлияет на a:
b = 20;
console.log(a); // 10
console.log(b); // 20

В отличие от объектов, примитивные типы данных не ссылаются на одно и то же место в памяти. Они хранятся отдельно и изменяются независимо друг от друга.